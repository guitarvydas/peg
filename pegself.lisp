(in-package :peg-grammar)

(defun pegself ()
  (let ((peg (alexandria:read-file-into-string "peg.peg")))
    (with-open-file (f "regression1.lisp" :direction :output :if-exists :supersede)
      (pprint '(DEFPACKAGE :PEG-GRAMMAR-R1 (:USE :CL :ESRAP :CL-HEREDOC)) f)
      (terpri f)
      (pprint '(IN-PACKAGE :PEG-GRAMMAR-R1) f)
      (terpri f)
      (dolist (def (cdr (parse 'grammar peg)))
        (pprint def f)
        (terpri f)))))

(defun pegself-self ()
  (let ((peg (alexandria:read-file-into-string "peg.peg")))
    (with-open-file (f "regression2.lisp" :direction :output :if-exists :supersede)
      (pprint '(DEFPACKAGE :PEG-GRAMMAR-R1 (:USE :CL :ESRAP :CL-HEREDOC)) f)
      (terpri f)
      (pprint '(IN-PACKAGE :PEG-GRAMMAR-R1) f)
      (terpri f)
      (dolist (def (cdr (parse 'peg-grammar-r1::grammar peg)))
        (pprint def f)
        (terpri f)))))

(defun overwrite-peg ()
  (let ((peg (alexandria:read-file-into-string "peg.peg")))
    (with-open-file (f "peg.lisp" :direction :output :if-exists :supersede)
      (pprint '(DEFPACKAGE :PEG-GRAMMAR (:USE :CL :ESRAP :CL-HEREDOC)) f)
      (terpri f)
      (pprint '(IN-PACKAGE :PEG-GRAMMAR) f)
      (terpri f)
      (dolist (def (cdr (parse 'peg-grammar-r1::grammar peg)))
        (pprint def f)
        (terpri f)))))



