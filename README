A couple of experiments using the PEG parser "esrap".

Goals:

1. See that PEG grammars can be used to create read macros.

2. Can we program in a different syntax inside #{ ... } and have it converted to CL syntax?  E.G., can we write prolog code in prolog syntax and have it compile to CL?


How to load it manually (in the interim):

>  (ql:quickload "alexandria")
>  (ql:quickload "esrap")
>  (ql:quickload "cl-heredoc")
>  (set-dispatch-macro-character #\# #\> #'cl-heredoc:read-heredoc)
>  (ql:register-local-projects)
>  (load "package")
>  (compile-file "peg.lisp")
>  (load "peg")

Examples:

arith.lisp: esrap grammar for a simple 4-banger calculator-interpreter (waiting to be converted to a peg grammar)

arith-mac.lisp: esrap grammar for a simple 4-banger calculator which returns the equivalent CL code.  If unquoted, CL will compile and execute the expression.  (waiting to be converted to a peg grammar)

pegself.lisp: peg written in itself ; was used to generate peg.lisp.

peg-bootstrap.lisp: peg written manually, for bootstrapping.


To regenerate / regression test:

(compile-file "pegself.lisp")
(load "pegself")
(peg-grammar::pegself)

(compile-file "regression1.lisp")
(load "regression1")
(peg-grammar::pegself-self)

produces regression1.lisp and regression2.lisp

diff them, if no errors, 

(peg-grammar::overwrite-peg)
(compile-file "peg.lisp")
(load "peg")
